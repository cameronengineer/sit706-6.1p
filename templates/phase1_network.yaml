AWSTemplateFormatVersion: 2010-09-09
Description: Networking infra
Resources:

##
## 1.1 Create a VPC as shown in the design diagram above
##

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 192.168.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: VPC
        - Key: class
          Value: SIT706

  InternetGateway:
    Type: AWS::EC2::InternetGateway
  
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: 
        !Ref VPC
      CidrBlock: 192.168.0.0/24
      AvailabilityZone: ap-southeast-2a
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Public subnet 1
        - Key: class
          Value: SIT706

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: 
        !Ref VPC
      CidrBlock: 192.168.1.0/24
      AvailabilityZone: ap-southeast-2b
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Public subnet 2
        - Key: class
          Value: SIT706

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: 
        !Ref VPC
      CidrBlock: 192.168.2.0/24
      AvailabilityZone: ap-southeast-2a
      Tags:
        - Key: Name
          Value: Private subnet 1
        - Key: class
          Value: SIT706

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: 
        !Ref VPC
      CidrBlock: 192.168.3.0/24
      AvailabilityZone: ap-southeast-2b
      Tags:
        - Key: Name
          Value: Private subnet 2
        - Key: class
          Value: SIT706

##
## 1.2 Create a NAT gateway in the public subnet 1
##

  NatGatewayEIP:
    Type: AWS::EC2::EIP

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet1

  NatGatewaySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: VPC
    Properties:
      GroupDescription: NAT SG
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

##
## 1.3 Create the appropriate Rout Tables for private and public subnet, and associate them with the subnets
##

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Public Route Table

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Private Route Table

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref NatGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

Outputs:

##
## Export the values so they can be accessed by the application cloud formation.
##
  VPCId:
    Value: !Ref VPC
    Export:
      Name: !Sub "${AWS::StackName}-VPCID"

  PublicSubnet1ExportId:
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub "${AWS::StackName}-PublicSubnet1ExportId"

  PublicSubnet2ExportId:
    Value: !Ref PublicSubnet2
    Export:
      Name: !Sub "${AWS::StackName}-PublicSubnet2ExportId"

  PrivateSubnet1ExportId:
    Value: !Ref PrivateSubnet1
    Export:
      Name: !Sub "${AWS::StackName}-PrivateSubnet1ExportId"

  PrivateSubnet2ExportId:
    Value: !Ref PrivateSubnet2
    Export:
      Name: !Sub "${AWS::StackName}-PrivateSubnet2ExportId"
